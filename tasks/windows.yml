---
# https://docs.ansible.com/ansible/intro_windows.html
# Client should have PowerShell remoting configured
# Execute: https://github.com/ansible/ansible/blob/devel/examples/scripts/ConfigureRemotingForAnsible.ps1

# https://benchmarks.cisecurity.org/downloads/browse/index.cfm?category=benchmarks.os.windows
# https://technet.microsoft.com/en-us/library/gg236605.aspx
# https://technet.microsoft.com/en-us/library/cc677002.aspx
# http://iase.disa.mil/stigs/Pages/index.aspx
# http://iase.disa.mil/stigs/Pages/stig-viewing-guidance.aspx

- name: Create ansible directories
  ansible.windows.win_file:
    path: "{{ item }}"
    state: directory
  # raw: "mkdir {{ item }}"
  with_items:
    - "{{ harden_win_temp_dir }}"
    - "{{ harden_win_log_dir }}"
  failed_when: false

- name: Restrict permissions for ansible directories
  ansible.windows.win_acl:
    path: "{{ item.p }}"
    user: "{{ item.u }}"
    rights: "{{ item.r }}"
    type: "{{ item.t }}"
    state: "{{ item.s }}"
    inherit: "{{ item.i }}"
    propagation: "{{ item.pr }}"
  with_items:
    - { p: "{{ harden_win_temp_dir }}",
        u: "{{ windows_group_builtin_user }}",
        r: 'ReadAndExecute,Write,AppendData',
        t: allow,
        s: absent,
        i: 'ContainerInherit, ObjectInherit',
        pr: 'None'
    }
    - { p: "{{ harden_win_temp_dir }}",
        u: "{{ windows_authenticated_users }}",
        r: 'ReadAndExecute,Write,AppendData',
        t: allow,
        s: absent,
        i: 'ContainerInherit, ObjectInherit',
        pr: 'None'
    }
    - { p: "{{ harden_win_log_dir }}",
        u: "{{ windows_group_builtin_user }}",
        r: 'ReadAndExecute,Write,AppendData',
        t: allow,
        s: absent,
        i: 'ContainerInherit, ObjectInherit',
        pr: 'None'
    }

## FIXME! failing on second pass, https://groups.google.com/forum/#!topic/ansible-project/_ydkYXZibrM
- name: Ensure user _test is present
  ansible.windows.win_user:
    name: _test
    password: "{{ harden_win_test_password }}"
    state: present
    groups:
      - Users
  when: harden_win_testing
  no_log: true

## [WARNING]: Module invocation had junk after the JSON data:
- name: Install all security/critical updates
  ansible.windows.win_updates:
    category: SecurityUpdates
    logPath: "{{ harden_win_temp_dir }}\\ansible-updates.log"
  when: harden_win_securityupdates is defined and harden_win_securityupdates
  tags:
    - updates

## https://github.com/ansible/ansible/issues/13856
## FIXME! FAILED! => {"changed": false, "choco_bootstrap_output": ["Getting latest version of the Chocolatey
##  package for download.", "Getting Chocolatey from https://chocolatey.org/api/v2/package/chocolatey/0.10.3.",
##  "Downloading 7-Zip commandline tool prior to extraction.", "Extracting
##  C:\\Users\\ADMINI~1\\AppData\\Local\\Temp\\chocolatey\\chocInstall\\chocolatey.zip to
##  C:\\Users\\ADMINI~1\\AppData\\Local\\Temp\\chocolatey\\chocInstall...", "Installing chocolatey on this machine",
##  "Creating ChocolateyInstall as an environment variable (targeting 'Machine') ", "  Setting ChocolateyInstall to
##  'C:\\ProgramData\\chocolatey'", "WARNING: It's very likely you will need to close and reopen your shell ", "
##  before you can use choco."], "failed": true, "msg": "Chocolatey bootstrap installation failed."}
- name: Chocolatey installation
  chocolatey.chocolatey.win_chocolatey:
    name: chocolatey
    state: present

# - name: Fix problem with Chocolatey .99 (https://github.com/ansible/ansible-modules-extras/issues/378)
#   raw: Chocolatey feature enable -n allowGlobalConfirmation

- name: Install packages
  chocolatey.chocolatey.win_chocolatey:
    name: "{{ item }}"
  with_items: "{{ harden_win_chocolateypkgs }}"
  ## for package asking for reboot
  failed_when: false
  tags:
    - packages

## FIXME!
# - name: Ensure no users-writeable dir in general paths
#   ansible.windows.win_acl:
#     path: "{{ item }}"
#     user: Users
#     rights: AppendData,WriteData,Write,FullControl
#     type: allow
#     state: absent
#     inherit: ContainerInherit,ObjectInherit
##     propagation: InheritOnly
#     propagation: None
#   ansible.windows.win_command: "icacls \"{{ item }}\" /remove:g Users:(W)(AD)(WD) /T /inheritance:d"
#   with_items:
#     - 'c:\opscode\inspec'
#     - 'c:\ProgramData'
#     - "{{ harden_win_temp_dir }}"
#     - "{{ harden_win_log_dir }}"

- name: Check ipv4 interface status
  ansible.builtin.raw: "netsh interface ipv4 show global | findstr MLD | findstr {{ windows_mld_level }}"
  register: ipv4if
  changed_when: false
  failed_when: false

- name: Disable IGMP on ipv4 interface
  ansible.builtin.raw: "Netsh interface ipv4 set global mldlevel=none"
  when: not ("none" in ipv4if.stdout)

- name: Remove files
  ansible.windows.win_file:
    dest: "{{ item }}"
    state: absent
  with_items: "{{ harden_win_remove_filelist }}"

## win_regedit: New in ansible version 2.0
- name: Import windows-registry
  ansible.builtin.import_tasks: windows-registry.yml
  when: harden_win_registry is defined and harden_win_registry
  tags:
    - registry

- name: Import windows-ie
  ansible.builtin.import_tasks: windows-ie.yml
- name: Import windows-smb
  ansible.builtin.import_tasks: windows-smb.yml
- name: Import windows-wmi
  ansible.builtin.import_tasks: windows-wmi.yml
- name: Import windows-online
  ansible.builtin.import_tasks: windows-online.yml
- name: Import windows-ipv6
  ansible.builtin.import_tasks: windows-ipv6.yml
- name: Import windows-rdp
  ansible.builtin.import_tasks: windows-rdp.yml

- name: Import adobreader
  ansible.builtin.import_tasks: adobereader.yml
  when: harden_win_adobereader is defined and harden_win_adobereader
- name: Import windows-flash
  ansible.builtin.import_tasks: windows-flash.yml
  when: harden_win_flash is defined and harden_win_flash

## PECaptureSvc, https://isc.sans.edu/forums/diary/Hunting+for+Executable+Code+in+Windows+Environments/20745/

## access time within Ntfs
## volume shadow copies
## central logging / windows event log forwarding
## https://blog.brankovucinec.com/2014/10/24/use-software-restriction-policies-to-block-viruses-and-malware/
##      = SRP lock on %APPDATA%

- name: Import windows-adminshares
  ansible.builtin.import_tasks: windows-adminshares.yml
  when: harden_win_disable_adminshares|bool

- name: Import windows-local-gpo
  ansible.builtin.import_tasks: windows-local-gpo.yml
  when: harden_win_gpo_local is defined and harden_win_gpo_local|bool

- name: Import windows-nxlog
  ansible.builtin.import_tasks: windows-nxlog.yml
  when: harden_win_remotelogging is defined and harden_win_remotelogging|bool

- name: Import windows-vss
  ansible.builtin.import_tasks: windows-vss.yml
  when: harden_win_vss is defined and harden_win_vss

- name: Import windows-wmi-monitor
  ansible.builtin.import_tasks: windows-wmi-monitor.yml
  when: harden_win_wmi_monitor is defined and harden_win_wmi_monitor|bool

- name: Import windows-netcease
  ansible.builtin.import_tasks: windows-netcease.yml
  when: harden_win_netcease is defined and harden_win_netcease|bool

- name: Import windows-dnscrypt
  ansible.builtin.import_tasks: windows-dnscrypt.yml
  when: harden_win_simplednscrypt|bool

- name: Import windows-error-reporting
  ansible.builtin.import_tasks: windows-error-reporting.yml
  when: harden_win_configure_errorreporting|bool

- name: Import mbrfilter
  ansible.builtin.import_tasks: mbrfilter.yml
  when: harden_win_mbrfilter|bool

- name: Import windows-usb
  ansible.builtin.import_tasks: windows-usb.yml
  when: harden_win_restrict_usb|bool

- name: Import windows10
  ansible.builtin.import_tasks: windows10.yml
  when: harden_windows_disable_win10cortana|bool and ansible_distribution_major_version|int >= 10
- name: Import windows-cortana
  ansible.builtin.import_tasks: windows-cortana.yml
  when: harden_windows_disable_win10cortana|bool and ansible_distribution_major_version|int >= 10

- name: Import windows-dma
  ansible.builtin.import_tasks: windows-dma.yml
  when: harden_win_restrict_dma|bool

- name: Import windows-certificates
  ansible.builtin.import_tasks: windows-certificates.yml
  when: harden_win_certificates_review|bool

- name: Import windows-disallowrun
  ansible.builtin.import_tasks: windows-disallowrun.yml
  when: harden_win_disallowrun|bool

- name: Import windows-feature
  ansible.builtin.import_tasks: windows-feature.yml

- name: Import windows-paging
  ansible.builtin.import_tasks: windows-paging.yml
  when: harden_win_paging|bool

- name: Import windows-sticky-keys
  ansible.builtin.import_tasks: windows-sticky-keys.yml
  when: harden_win_stickykeys_disable|bool

- name: Import windows-laps
  ansible.builtin.import_tasks: windows-laps.yml
  when: harden_win_laps_enable|bool

- name: Import windows-wef
  ansible.builtin.import_tasks: windows-wef.yml
  when: harden_win_wef_enable|bool

- name: Import passwd-filters
  ansible.builtin.import_tasks: passwd-filters.yml
  when: harden_win_passwd_filters|bool

- name: Import windows-acl
  ansible.builtin.import_tasks: windows-acl.yml
  when: not (ansible_env is defined and ansible_env.APPVEYOR is defined and ansible_env.APPVEYOR) and harden_win_acl|bool

- name: Import windows-smari
  ansible.builtin.import_tasks: windows-samri.yml
  when: harden_win_samri|bool

- name: Import windows-deviceguard
  ansible.builtin.import_tasks: windows-deviceguard.yml
  when: harden_win_deviceguard|bool

- name: Import windows-taskmanager
  ansible.builtin.import_tasks: windows-taskmanager.yml
  when: harden_win_disable_taskmanager|bool

- name: Import windows-msdt
  ansible.builtin.import_tasks: windows-msdt.yml
  when: harden_win_disable_msdt|bool

- name: Import windows-defender
  ansible.builtin.import_tasks: windows-defender.yml
  when: harden_win_defender|bool

- name: Import forcing-afterhours-user-logoffs
  ansible.builtin.import_tasks: forcing-afterhours-user-logoffs.yml
  when: harden_win_forcing_afterhours_logoff|bool

- name: Import extras
  ansible.builtin.import_tasks: extras.yml

- name: Import palantir-AutorunsToZinEventLog
  ansible.builtin.import_tasks: palantir-AutorunsToWinEventLog.yml
  when: harden_win_palantir_AutorunsToWinEventLog|bool

- name: Import dc-krgtbt-reset
  ansible.builtin.import_tasks: dc-krgtbt-reset.yml
  when: harden_win_Is_DC|bool

# last to allow creation of scheduled tasks before
- name: Import windows-taskscheduler
  ansible.builtin.import_tasks: windows-taskscheduler.yml
